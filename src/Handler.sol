// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.10;

import "./libraries/Constants.sol";
import { IERC20 } from "forge-std/interfaces/IERC20.sol";
import {CommonBase} from "forge-std/Base.sol";
import {StdCheats} from "forge-std/StdCheats.sol";
import {StdUtils} from "forge-std/StdUtils.sol";
import "./interfaces/IMasterPlatypusV4.sol";
import "./interfaces/IPlatypusPool.sol";
import "./interfaces/IPlatypusTreasure.sol";
import "./interfaces/IAaveFlashloan.sol";
 

contract Handler is CommonBase, StdCheats, StdUtils {

    IERC20 USDC = IERC20(Constants.USDC);
    IERC20 USP = IERC20(Constants.USP);
    IERC20 LPUSDC = IERC20(Constants.LPUSDC);
    PlatypusPool Pool = PlatypusPool(Constants.PLATYPUS_POOL);
    MasterPlatypusV4 Master = MasterPlatypusV4(Constants.PLATYPUS_MASTERPLATYPUSV4);
    PlatypusTreasure Treasure = PlatypusTreasure(Constants.PLATYPUS_TREASURE);

    bool emergency = false;

    constructor() {
        deal(address(this), 10000 ether);
        Pool.swap(address(0), address(USDC), address(this).balance, 0, address(this), block.timestamp);
        // fix error with swap
    }

    function approveUSDC() external {
        uint256 amount = USDC.balanceOf(address(this));
        USDC.approve(address(Pool), amount);
    }

    function depositToPool() external {
        uint256 amount = USDC.balanceOf(address(this));
        Pool.deposit(address(USDC), amount, address(this), block.timestamp); 
    }

    function approveLPUSDC() external {
        uint256 LPUSDCAmount = LPUSDC.balanceOf(address(this));
        
        LPUSDC.approve(address(Master), LPUSDCAmount);
    }

    function depositToMater() external {
        uint256 LPUSDCAmount = LPUSDC.balanceOf(address(this));
        
        Master.deposit(4, LPUSDCAmount);
    }

    function borrowFromTreasure() external {
        PlatypusTreasure.PositionView memory Position = Treasure.positionView(address(this), address(LPUSDC));
        
        uint256 borrowAmount = Position.borrowLimitUSP;
        
        Treasure.borrow(address(LPUSDC), borrowAmount);
    }

    function emergencyWithdraw() external {
        Master.emergencyWithdraw(4);

    }

    function withdraw() external {
        PlatypusTreasure.PositionView memory Position = Treasure.positionView(address(this), address(LPUSDC));
        
        uint256 LPUSDCAmount = Position.collateralAmount;
       
        Master.withdraw(4, LPUSDCAmount);
    }

}